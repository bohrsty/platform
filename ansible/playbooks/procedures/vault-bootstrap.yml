- hosts: local:consul_servers
  tasks:

  - include_vars: ../../roles/vault/vars/main.yml

  - name: Check if Vault has been bootstrapped
    stat: path=/etc/vault-bootstrapped
    register: vault_bootstrapped

  - fail:
      msg: >
        "Vault has already been bootstrapped. Please email support@teamwire.eu if you require support on this."
    when: vault_bootstrapped.stat.exists

  - name: Check if Vault is already installed
    stat: path=/usr/local/bin/vault
    register: vault_binary

  - name: Create 3rd party download directory
    file:
      dest: /var/cache/downloads
      state: directory
      mode: 0755

  - name: Download Vault
    get_url:
      url: https://releases.hashicorp.com/vault/{{vault_version}}/vault_{{vault_version}}_linux_amd64.zip
      dest: /var/cache/downloads/vault_{{vault_version}}_linux_amd64.zip
      checksum: sha256:{{vault_checksum}}
      mode: 0440
    register: vault_downloaded

  - name: Install the Vault binary
    unarchive: 
      src: /var/cache/downloads/vault_{{vault_version}}_linux_amd64.zip
      dest: /usr/local/bin
      mode: 0755
      copy: no
    when: vault_downloaded.changed or not vault_binary.stat.exists 

  - name: Create Vault directories
    file:
      path: "{{ item }}"
      state: directory
      mode: 0775
    with_items:
      - /etc/vault
      - /var/lib/vault
      - /var/lib/vault/ssl
      - /var/lib/vault/store

  - name: Write Vault config
    template: src=../../roles/vault/templates/vault.hcl.j2 dest=/etc/vault/vault.hcl

  - name: Vault systemd config
    copy: src=../../roles/vault/files/vault.service dest=/etc/systemd/system/vault.service

  - name: Enable the Vault service
    service: name=vault state=restarted enabled=yes

  - name: Initiate Vault
    command: vault operator init -key-shares=6 -key-threshold=2 -format=json
    register: vault_info
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
  
  - name: Extract Vault unseal keys and root token
    run_once: True
    set_fact:
      vault_keys: "{{ (vault_info.stdout|from_json)['unseal_keys_b64'] }}"
      vault_token: "{{ (vault_info.stdout|from_json)['root_token'] }}"

  - name: Create Vault credentials file
    template:
      src: ../../roles/vault/templates/credentials.j2
      dest: /home/teamwire/vault-credentials
    run_once: True

  - name: Set temporary VAULT_TOKEN environment variable
    shell: export VAULT_TOKEN="{{ vault_token }}"

  - name: Unseal Vault
    command: vault operator unseal "{{ item }}"
    with_items:
      - "{{ vault_keys[0] }}"
      - "{{ vault_keys[1] }}"
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Authorise root user for Vault login
    copy:
      content: "{{ vault_token }}"
      dest: /root/.vault-token 

  - name: Authorise teamwire user for Vault login
    copy:
      content: "{{ vault_token }}"
      dest: /home/teamwire/.vault-token

  - name: Enable audit logging
    command: vault audit enable file file_path=/var/log/vault_audit.log
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
    run_once: true  

  - name: Enable Vault autocomplete
    command: vault -autocomplete-install
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  #Enable TLS

  - name: Enable PKI backend
    command: vault secrets enable pki
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Set max global SSL lease to 25 years
    command: vault secrets tune -max-lease-ttl=219000h pki
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Generate Root CA certificate
    command: vault write pki/root/generate/internal common_name="Vault Root CA" ttl=219000h
    register: root_ca
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Create certificate revocation list
    command: vault write pki/config/urls issuing_certificates="http://127.0.0.1:8200/v1/pki/ca" crl_distribution_points="http://127.0.0.1:8200/v1/pki/crl"
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Create role for issuing certificates
    command: vault write pki/roles/tls allow_any_name=true allowed_domains=localhost allow_subdomains=true allow_ip_sans="true" max_ttl=26280h
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Issue a TLS certificate for Vault to use
    command: vault write pki/issue/tls common_name=127.0.0.1 ip_sans="127.0.0.1" --format=json
    run_once: True
    register: issue_info
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
  
  - name: Set certificate fact
    run_once: True
    set_fact:
      vault_certificate: "{{ issue_info.stdout | from_json }}"

  - name: Install Vault root CA, tls certificate and private key
    copy: content={{ item.content }} dest={{ item.dest }}
    with_items:
      - { content: '{{ vault_certificate.data.issuing_ca }}', dest: '/usr/local/share/ca-certificates/vault-rootCA.crt' }
      - { content: '{{ vault_certificate.data.certificate }}', dest: '/var/lib/vault/ssl/vault.crt' }
      - { content: '{{ vault_certificate.data.private_key }}', dest: '/var/lib/vault/ssl/vault.pem' }
    become: yes

  - name: Trust the Vault Root CA
    command: update-ca-certificates

  - name: Add Vault Environment variables
    lineinfile:
      dest: /etc/environment
      regexp: "^{{ item.property }}="
      line: "{{ item.property }}={{ item.value }}"
    with_items:
      - { property: 'VAULT_ADDR', value: 'https://127.0.0.1:8200' }
      - { property: 'VAULT_TOKEN', value: '{{ vault_token }}' }
      - { property: 'VAULT_CACERT', value: '/etc/ssl/certs/ca-certificates.crt' }

  - name: Set bootstrap flag
    file: path=/etc/vault-bootstrapped state=touch

  - name: Confirm bootstrap flag existence
    stat: path=/etc/vault-bootstrapped
    register: vault_bootstrapped

  - name: Enable SSL in Vault configuration
    template: src=../../roles/vault/templates/vault.hcl.j2 dest=/etc/vault/vault.hcl

  - name: Restart Vault so that it uses TLS
    service:
      name: vault
      state: restarted

  - name: Unseal Vault
    command: vault operator unseal "{{ item }}"
    with_items:
      - "{{ vault_keys[0] }}"
      - "{{ vault_keys[1] }}"

  - name: Generate secrets
    command: vault write secret/"{{ item.secret }}" value=
    with_items:
      - { secret: 'dockerhub/username' }
      - { secret: 'dockerhub/password' }
      - { secret: 'dockerhub/email' }
      - { secret: 'keys/gcm' }
      - { secret: 'database/username' }
      - { secret: 'database/password' }
      - { secret: 'database/name' }
      - { secret: 'database/aes_key' }
      - { secret: 'dbserver/mysql_root_password' }
      - { secret: 'dbserver/clustercheck_password' }
      - { secret: 'dbserver/xtrabackup_password' }
      - { secret: 'redis/password' }
      - { secret: 'smtp/username' }
      - { secret: 'smtp/password' }
    run_once: true

  - debug: msg="Vault has now been bootstrapped, the Vault credentials have been stored at /home/teamwire/vault-credentials"
    run_once: true
