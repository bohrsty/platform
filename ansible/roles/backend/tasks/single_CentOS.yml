---
- include: configuration.yml

- name: Install the container helper tool
  copy:
    src: twctl
    dest: /usr/local/bin/twctl
    mode: 0755
    owner: root
    group: root

- name: Install the database charset correction tool
  copy:
    src: dbcharset
    dest: /usr/local/bin/dbcharset
    mode: 0755
    owner: root
    group: root

- name: Retrieve and run the Teamwire backend main container
  when: config_done is defined
  docker_container:
    name: teamwire_backend
    image: "teamwire/backend:{{version|default('prod')}}"
    state: started
    restart_policy: always
    network_mode: host
    published_ports: 
      - 8080
    volumes: "/data/archiving:/archiving,/data/assets:/assets"
    log_driver: "syslog"
    log_opt:
      tag: teamwire-backend
      syslog-facility: "local6"
    env:
      AESKEY: "{{aes_key}}"
      ARCHIVING_CONFIG: "/archiving/archiving.conf"
      ARCHIVING_GPGHOME: "/archiving/gpg"
      BIND_HOST: "127.0.0.1"
      BIND_PORT: "8080"
      ORG_DEFAULT_ALLOW_USER_REG: "{{ allow_unknown_users|default('true') }}"
      ORG_DEFAULT_ALLOW_USER_QUERY: "{{ allow_user_query|default('false') }}"
      MYSQL_HOST: "{{ mysql_host | default() }}"
      MYSQL_PORT: "{{ mysql_port  | default() }}"
      MYSQL_DATABASE: "{{ teamwire_db_name if mysql_host is defined else '' }}"
      MYSQL_USER: "{{ teamwire_db_user if mysql_host is defined else '' }}"
      MYSQL_PASSWORD: "{{ teamwire_db_password if mysql_host is defined else '' }}"
      ORA_HOST: "{{ oracle_host | default() }}"
      ORA_PORT: "{{ oracle_port | default() }}"
      ORA_DATABASE: "{{ teamwire_db_name if oracle_host is defined else '' }}"
      ORA_USER: "{{ teamwire_db_user if oracle_host is defined else '' }}"
      ORA_PASSWORD: "{{ teamwire_db_password if oracle_host is defined else '' }}"
      REDIS_URI: "{{ redis_host }}:{{ redis_port }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      EMAIL_HOST: "{{ '127.0.0.1' if fake_email_confirmation is not defined else '' }}"
      BLOB_DIR: /assets
      DEFAULT_FROM_EMAIL: "{{sender_address}}"
      http_proxy: "{{http_proxy|default()}}"
      https_proxy: "{{http_proxy|default()}}"
      SERVICE_NAME: "backend"
      VERSION: "{{ version }}"
      FAKE_PIN: "{{ fake_pin|default() }}"
      FAKE_SMS: "{{ fake_sms|default() }}"
      FAKE_EMAIL_CONFIRMATION: "{{ fake_email_confirmation|default() }}"
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Run the Teamwire backend worker container
  when: config_done is defined
  docker_container:
    name: teamwire_worker
    image: "teamwire/backend:{{version|default('prod')}}"
    state: started
    restart_policy: always
    network_mode: bridge
    published_ports:
      - 127.0.0.1:8082:8080
    volumes: "/data/assets:/assets,/data/certs/apns/:/app/certs/apns/"
    log_driver: "syslog"
    log_opt:
      tag: teamwire-worker
      syslog-facility: "local6"
    env:
      MODE: worker
      AESKEY: "{{aes_key}}"
      MYSQL_HOST: "{{ mysql_host | default() }}"
      MYSQL_PORT: "{{ mysql_port  | default() }}"
      MYSQL_DATABASE: "{{ teamwire_db_name if mysql_host is defined else '' }}"
      MYSQL_USER: "{{ teamwire_db_user if mysql_host is defined else '' }}"
      MYSQL_PASSWORD: "{{ teamwire_db_password if mysql_host is defined else '' }}"
      ORA_HOST: "{{ oracle_host | default() }}"
      ORA_PORT: "{{ oracle_port | default() }}"
      ORA_DATABASE: "{{ teamwire_db_name if oracle_host is defined else '' }}"
      ORA_USER: "{{ teamwire_db_user if oracle_host is defined else '' }}"
      ORA_PASSWORD: "{{ teamwire_db_password if oracle_host is defined else '' }}"
      REDIS_URI: "{{ redis_host }}:{{ redis_port }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      NOTIFICATION_SERVER_URL: "http://{{ ansible_docker0['ipv4']['address'] }}:9081"
      BLOBDIR: /assets
      APNS_CERT_1: "/app/certs/apns/aps-production.pem,push_production,{{ apns_appid|default('com.teamwire.messenger') }}"
      APNS_CERT_2: "{% if apns_certificate_2 is defined %}/app/certs/apns/{{ apns_certificate_2 | basename }},push_production,{{ apns_appid_2 }}{% endif %}"
      GCM_API_KEY: "{{ gcm_api_key }}"
      WNS_CLIENT_ID:  "{{ wns_client_id|default() }}"
      WNS_CLIENT_SECRET:  "{{ wns_client_secret|default() }}"
      http_proxy: "{{http_proxy|default()}}"
      https_proxy: "{{http_proxy|default()}}"
      SERVICE_NAME: "worker"
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Run the Teamwire beat container
  when: config_done is defined
  docker_container:
    name: teamwire_beat
    image: "teamwire/backend:{{version|default('prod')}}"
    state: started
    restart_policy: always
    network_mode: host
    volumes: "/data/beat:/beat"
    log_driver: "syslog"
    log_opt:
      tag: teamwire-beat
      syslog-facility: "local6"
    env:
      MODE: beat
      AESKEY: "{{aes_key}}"
      MYSQL_HOST: "{{ mysql_host | default() }}"
      MYSQL_PORT: "{{ mysql_port  | default() }}"
      MYSQL_DATABASE: "{{ teamwire_db_name if mysql_host is defined else '' }}"
      MYSQL_USER: "{{ teamwire_db_user if mysql_host is defined else '' }}"
      MYSQL_PASSWORD: "{{ teamwire_db_password if mysql_host is defined else '' }}"
      ORA_HOST: "{{ oracle_host | default() }}"
      ORA_PORT: "{{ oracle_port | default() }}"
      ORA_DATABASE: "{{ teamwire_db_name if oracle_host is defined else '' }}"
      ORA_USER: "{{ teamwire_db_user if oracle_host is defined else '' }}"
      ORA_PASSWORD: "{{ teamwire_db_password if oracle_host is defined else '' }}"
      REDIS_URI: "{{ redis_host }}:{{ redis_port }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      CELERY_BEAT_SCHEDULE: /beat/celerybeat-schedule
      FAKE_DB_ENCRYPTION: "{{ fake_db_encryption|default() }}"

- name: Retrieve and run the Teamwire notification server container
  when: config_done is defined
  docker_container:
    name: teamwire_notification_server
    image: "teamwire/notification-server:{{version|default('prod')}}"
    state: started
    restart_policy: always
    network_mode: host
    ports:
      - 9080
      - 9081
    log_driver: "syslog"
    log_opt:
      tag: teamwire-notifications
      syslog-facility: "local6"
    env:
      REDIS_URI: "{{ redis_host }}:{{ redis_port }}:1"
      REDIS_PASSWORD: "{{ redis_pass|default() }}"
      LOGLEVEL: "{{ notification_loglevel|default() }}"

- name: Retrieve and run the Teamwire backend web screenshot container
  when: config_done is defined
  docker_container:
    name: teamwire_screenshot_server
    image: "teamwire/web-screenshot-server:{{version|default('prod')}}"
    state: started
    restart_policy: always
    network_mode: bridge
    ports:
      - 127.0.0.1:8081:8080
    volumes: "/data/website-screenshot-cache:/website-screenshot-cache"
    log_driver: "syslog"
    log_opt:
      tag: teamwire-screenshot-server
      syslog-facility: "local6"
    env:
      CACHE_DIR: /website-screenshot-cache
      HTTP_PROXY: "{{ http_proxy|default() }}"
