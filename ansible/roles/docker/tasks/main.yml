---
- name: Ensure rsyslog is installed
  apt: pkg=rsyslog

- name: Configure rsyslog for docker containers
  copy: src=10-docker.conf dest=/etc/rsyslog.d/10-docker.conf
  notify: restart rsyslog

- name: Don't log container logs into /var/log/messages
  patch: >
    src=rsyslog.conf.patch
    dest=/etc/rsyslog.conf
  notify: restart rsyslog
  when: ansible_distribution == "Debian"

- name: Install logrotate job for cluster logs
  copy: src=container-log dest=/etc/logrotate.d/container-log

# Install and configure docker
- name: Check if the Docker repository signing key needs to be installed
  shell: bash -c "gpg --keyring /etc/apt/trusted.gpg -k 0EBFCD88 > /dev/null 2>&1 && echo present || echo absent"
  register: docker_repo_key
  changed_when: False

- name: Add the Docker repository signing key (direct connection)
  apt_key:
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    keyserver: hkp://p80.pool.sks-keyservers.net:80
    state: present
  when: docker_repo_key.stdout == "absent" and http_proxy is not defined

- name: Add the Docker repository signing key (via proxy server)
  command: apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --keyserver-options http-proxy=\"{{http_proxy}}\" --recv-keys 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
  when: docker_repo_key.stdout == "absent" and http_proxy is defined

- name: Ensure apt-transport-https is installed
  apt: pkg=apt-transport-https state=present

- name: Add the Docker repository
  apt_repository:
    repo: 'deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} stable'
    state: present
    update_cache: yes

- name: Install Docker
  apt: pkg=docker-ce state=present

- name: Install docker-py 1.0 (Ubuntu)
  pip: name=docker-py version=1.0.0
  when: ansible_distribution == "Ubuntu"

- name: Install python-docker (Debian 8)
  apt: pkg=python-docker default_release=jessie-backports state=present
  when: ansible_distribution == "Debian" and ansible_distribution_release == 'jessie'

- name: Install python-docker (Debian 9)
  apt: pkg=python-docker state=present
  when: ansible_distribution == "Debian" and ansible_distribution_release == 'stretch'

- name: Add user 'teamwire' to the docker group
  user: name=teamwire groups=docker append=yes

- name: Create systemd drop-in directory for docker (Debian)
  file: name=/etc/systemd/system/docker.service.d state=directory
  when: ansible_distribution == "Debian"

- name: Configure proxy for docker (Ubuntu)
  when: http_proxy is defined and ansible_distribution == "Ubuntu"
  lineinfile:
    dest: /etc/default/docker
    regexp: http_proxy
    line: 'export http_proxy="{{http_proxy}}"'
  notify: restart docker

- name: Disable proxy for docker when no proxy is configured (Ubuntu)
  when: http_proxy is not defined and ansible_distribution == "Ubuntu"
  lineinfile:
    dest: /etc/default/docker
    regexp: http_proxy
    line: '# export http_proxy=""'
  notify: restart docker

- name: Configure proxy for docker (Debian)
  when: http_proxy is defined and ansible_distribution == "Debian" and (not 'docker_registry' in groups or inventory_hostname in groups.docker_registry)
  template:
    src: http-proxy.conf.j2
    dest: /etc/systemd/system/docker.service.d/http-proxy.conf
  notify:
    - reload systemd
    - restart docker

- name: Disable proxy for docker when no proxy is configured (Debian)
  when: http_proxy is not defined and ansible_distribution == "Debian"
  file:
    name: /etc/systemd/system/docker.service.d/http-proxy.conf
    state: absent
  notify:
    - reload systemd
    - restart docker

- name: Configure Docker daemon parameters (Debian)
  when: ansible_distribution == "Debian"
  template:
    src: docker.conf.j2
    dest: /etc/systemd/system/docker.service.d/docker.conf
  notify:
    - reload systemd
    - restart docker

- name: Start Docker after mounting NFS shares (Debian)
  when: ansible_distribution == "Debian"
  copy:
    src: wait_for_nfs.conf
    dest: /etc/systemd/system/docker.service.d/wait_for_nfs.conf
  notify: reload systemd

# Make sure docker is restarted before the containers are set up, otherwise
# the restart would kill the running containers. We need to restart before the
# following step, otherwise the login would fail when a proxy is configured.
- meta: flush_handlers

- name: Check if installing offline
  stat: path=/etc/offline_installation
  register: offline_mode

- name: Install Docker Registry on configured host
  include: registry.yml
  when: config_done is defined and 'docker_registry' in group_names

- name: Log in on Docker Hub (Ubuntu)
  command: docker login -e "{{ dockerhub_email }}" -u "{{ dockerhub_username }}" -p "{{ dockerhub_password }}"
  become: True
  become_user: teamwire
  when:
    - config_done is defined
    - ansible_distribution == "Ubuntu"
    - not offline_mode.stat.exists
  args:
    creates: /home/teamwire/.docker/config.json

# Requires docker-py >= 1.7, hence can only be used on Debian
- name: Log in on Docker Hub (Debian)
  when:
    - config_done is defined
    - ansible_distribution == "Debian"
    - not "docker_registry" in groups
    - not offline_mode.stat.exists
  become: True
  become_user: teamwire
  docker_login:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
    email: "{{ dockerhub_email }}"

- name: Configure firewall to allow Docker containers access to the host
  ufw: rule=allow interface=docker0 direction=in

- name: Run Vault-UI on Single servers and Consul servers on clusters
  when: ansible_play_hosts | length() == 1 or 'consul_servers' in group_names
  docker:
    name: vault-ui
    image: "{{ vaultui_container }}"
    state: reloaded
    restart_policy: always
    log_driver: syslog
    log_opt:
      tag: vault-ui
      syslog-facility: local6
    net: host
    ports: "8000:8000"
    volumes: "/var/run/docker.sock:/tmp/docker.sock"
    env:
      VAULT_URL_DEFAULT: "https://127.0.0.1:8200"
      VAULT_AUTH_DEFAULT: "token"
      NODE_TLS_REJECT_UNAUTHORIZED: "0"

- include: cluster.yml
  when: groups['all'] | length() > 1
